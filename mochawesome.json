{
  "stats": {
    "suites": 5,
    "tests": 5,
    "passes": 5,
    "pending": 0,
    "failures": 0,
    "start": "2023-02-28T16:36:21.785Z",
    "end": "2023-02-28T16:36:42.913Z",
    "duration": 2484,
    "testsRegistered": 5,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "2a4430c5-dc76-4412-8b7b-94b4b67f25bf",
      "title": "",
      "fullFile": "cypress/api-test/post/getRequest.cy.js",
      "file": "cypress/api-test/post/getRequest.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c075e8f6-4802-4e7f-9939-f2d49951785f",
          "title": "Test get request",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able to send GET request and verify response",
              "fullTitle": "Test get request should be able to send GET request and verify response",
              "timedOut": null,
              "duration": 196,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//let url = Cypress.env('BASE_URL') + '/posts'\ncy.request({\n  method: 'GET',\n  url: \"https://jsonplaceholder.typicode.com/posts\"\n}).then(response => {\n  // get\n  // cy.log(JSON.stringify(response.body))\n  // cy.log(JSON.stringify(response.status))\n  //------//\n  // verify use Chai assertion library\n  //expect(response.status).to.equal(200)\n  //expect(response.body.length).to.equal(100)\n  //-----//\n  // destructrure\n  let {\n    status,\n    body\n  } = response;\n  expect(status).to.equal(200);\n  expect(body.length).to.equal(100);\n  // Get random element arry object\n  let randomIndex = Math.random() * body.length;\n  let roundIndex = Math.floor(randomIndex);\n  let randomObject = body[roundIndex];\n  //call veriy function\n  verifyNotEmpty('userID', randomObject);\n  verifyNotEmpty('id', randomObject);\n  verifyNotEmpty('title', randomObject);\n  verifyNotEmpty('body', randomObject);\n});",
              "err": {},
              "uuid": "8a2e4191-ea60-4e5c-845f-17e316633c76",
              "parentUUID": "c075e8f6-4802-4e7f-9939-f2d49951785f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8a2e4191-ea60-4e5c-845f-17e316633c76"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 196,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "35a78acc-67cc-4f25-ba34-eb1131bf42d3",
      "title": "",
      "fullFile": "cypress/api-test/post/handleRequest.cy.js",
      "file": "cypress/api-test/post/handleRequest.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "90b8fcae-c6f7-4746-8714-35158964d5c9",
          "title": "Handling async request in Cypress",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should be able to await until a request resolved",
              "fullTitle": "Handling async request in Cypress Should be able to await until a request resolved",
              "timedOut": null,
              "duration": 102,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let header = {\n  'Content-type': 'application/json; charset=UTF-8'\n};\nlet url = Cypress.env('BASE_URL') + '/posts';\ncy.request({\n  method: 'POST',\n  url: url,\n  header: header,\n  body: {\n    title: 'foo',\n    body: 'bar',\n    userId: 1\n  }\n}).then(res => {\n  cy.log(JSON.stringify(res));\n  const postID = res.body.id;\n  cy.request({\n    method: 'PUT',\n    header: header,\n    url: Cypress.env('BASE_URL') + '/posts' + '/' + (postID - 1),\n    body: {\n      title: 'fooTest',\n      body: 'barTest',\n      userId: 1\n    }\n  }).then(res => {\n    cy.log(JSON.stringify(res));\n    cy.request({\n      method: 'DELETE',\n      url: Cypress.env('BASE_URL') + '/posts' + '/' + (postID - 1)\n    }).then(res => {\n      cy.log(JSON.stringify(res));\n    });\n  });\n});",
              "err": {},
              "uuid": "aa64084d-3e5d-46bd-88a9-8409226cfcf3",
              "parentUUID": "90b8fcae-c6f7-4746-8714-35158964d5c9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "aa64084d-3e5d-46bd-88a9-8409226cfcf3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 102,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "2d37e5df-78be-4fce-823b-574c559f5421",
      "title": "",
      "fullFile": "cypress/api-test/post/postRequest.cy.js",
      "file": "cypress/api-test/post/postRequest.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "fc617aac-b55e-429d-b455-e2287c00bb22",
          "title": "Test post request",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able send post request",
              "fullTitle": "Test post request should be able send post request",
              "timedOut": null,
              "duration": 689,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log(Cypress.env().BASE_URL);\nlet header = {\n  'Content-type': 'application/json; charset=UTF-8'\n};\n//let url = Cypress.env('BASE_URL') + '/posts'\nlet requestBody = {\n  title: 'foo',\n  body: 'bar',\n  userId: 1\n};\nlet requestObject = {\n  method: 'POST',\n  url: \"https://jsonplaceholder.typicode.com/posts\",\n  header: header,\n  body: requestBody\n};\ncy.request(requestObject).then(res => {\n  let {\n    status,\n    body\n  } = res;\n  // cy.log(JSON.stringify(body))\n  expect(status).to.equal(201, 'Status is not 200');\n  let {\n    userId,\n    id,\n    title\n  } = body;\n  let responseBody = body.body;\n  expect(userId).to.equal(requestBody.userId, 'userId is not correct');\n  expect(id).to.equal(101, 'id is not correct');\n  expect(title).to.equal(requestBody.title, 'title is not correct');\n  expect(responseBody).to.equal(requestBody.body, 'body is not correct');\n});",
              "err": {},
              "uuid": "492295ce-8b51-40b2-9cfd-cbf09c6a500e",
              "parentUUID": "fc617aac-b55e-429d-b455-e2287c00bb22",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "492295ce-8b51-40b2-9cfd-cbf09c6a500e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 689,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "8708c3e9-76e5-449f-a13a-8b50e5050db4",
      "title": "",
      "fullFile": "cypress/api-test/post/putRequest.cy.js",
      "file": "cypress/api-test/post/putRequest.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0a1b9adf-eaf1-4471-aba1-9cc183823315",
          "title": "Put request",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should be able to send put request",
              "fullTitle": "Put request Should be able to send put request",
              "timedOut": null,
              "duration": 648,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let bodyReq = {\n  id: 1,\n  title: 'foo',\n  body: 'bar',\n  userId: 1\n};\n//let url = Cypress.env('BASE_URL') + '/posts/1'\ncy.request({\n  method: 'PUT',\n  header: {\n    'Content-type': 'application/json; charset=UTF-8'\n  },\n  body: bodyReq,\n  url: \"https://jsonplaceholder.typicode.com/posts/1\"\n}).then(res => {\n  let {\n    status\n  } = res;\n  expect(status).to.equal(200, 'Verify status');\n  let {\n    body\n  } = res.body;\n  expect(bodyReq.body).to.equal(body, 'Verify body');\n});",
              "err": {},
              "uuid": "7cf6e683-e666-4a19-b6bb-d8dd23285605",
              "parentUUID": "0a1b9adf-eaf1-4471-aba1-9cc183823315",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7cf6e683-e666-4a19-b6bb-d8dd23285605"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 648,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "2baa8f6f-d93a-49de-a986-3774964a5aa7",
      "title": "",
      "fullFile": "cypress/api-test/post/deleteRequest.cy.js",
      "file": "cypress/api-test/post/deleteRequest.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d9abcfb8-ae02-4c7e-a850-106dfeff3235",
          "title": "Delete request",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "It should be able to send delete method",
              "fullTitle": "Delete request It should be able to send delete method",
              "timedOut": null,
              "duration": 849,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'DELETE',\n  url: \"https://jsonplaceholder.typicode.com/posts/1\"\n}).then(res => {\n  let {\n    status\n  } = res;\n  cy.log(JSON.stringify(res));\n  expect(status).to.equal(200, 'Verify delete successfully');\n});",
              "err": {},
              "uuid": "d5f6a71e-15dc-4412-bb00-04a086968e4e",
              "parentUUID": "d9abcfb8-ae02-4c7e-a850-106dfeff3235",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d5f6a71e-15dc-4412-bb00-04a086968e4e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 849,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "results",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}